buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'scala'

group = 'com.github.jtrim777'
version = '0.1.0'
archivesBaseName = 'metro'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: '1.18.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                metro {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                metro {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'metro', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                metro {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven {
        url "https://maven.pkg.github.com/jtrim777/scalacore"
        credentials {
            username = "Jtrim777"
            password = System.getenv().get("GITHUB_TOKEN")
        }
    }

    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeModule("org.typelevel", "cats-core_2.13")
            it.includeModule("org.typelevel", "cats-kernel_2.13")
        }
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    def scala_version = "2.13.8"
    def scala_major = "2.13"

    constraints {
        implementation 'org.scala-lang:scala-library:2.13.6'
    }

    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.5'

    compileOnly(group: 'org.scala-lang', name: 'scala-library', version: scala_version)
    // Add if you need this library. I use a modified version of Cats to avoid some module errors.
    compileOnly(group: 'org.typelevel', name: "cats-core_${scala_major}", version: '2.8.0-kotori')

    // The language loader. You can put the jar to the mods dir instead of declaring in `build.gradle`.
    // This file is needed as the scala library will not be loaded in dev environment due to change of classpath by Forge.
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: "2.13.8-build-2", classifier: "with-library") {
        transitive(false)
    }

    implementation 'com.github.jtrim777:mc-scalacore:1.18.1-0.2.1'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "metro",
                //"Specification-Vendor": "metro authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "metro authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
